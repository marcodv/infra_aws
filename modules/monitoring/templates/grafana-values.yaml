rbac:
  create: true
  pspEnabled: true
  pspUseAppArmor: true
  namespaced: true
serviceAccount:
  create: true
  name: ${GRAFANA_SERVICE_ACCOUNT}

replicas: 1

# Administrator credentials when not using an existing secret (see below)
adminUser: ${GRAFANA_ADMIN_USER}
adminPassword: ${GRAFANA_ADMIN_PASSWORD}

## See `kubectl explain deployment.spec.strategy` for more
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
deploymentStrategy:
  type: RollingUpdate

readinessProbe:
  httpGet:
    path: /api/health
    port: 3000

livenessProbe:
  httpGet:
    path: /api/health
    port: 3000
  initialDelaySeconds: 60
  timeoutSeconds: 30
  failureThreshold: 10

downloadDashboardsImage:
  repository: curlimages/curl
  tag: 7.70.0
  sha: ""
  pullPolicy: IfNotPresent

downloadDashboards:
  env: {}
  resources: {}

podLabels:
  app: grafana

podPortName: grafana

## Security context for Grafana to run
securityContext:
  runAsUser: 472
  runAsGroup: 472
  fsGroup: 472

## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  type: ClusterIP
  port: 80
  targetPort: 3000
  # targetPort: 4181 To be used with a proxy extraContainer
  annotations: {}
  labels:
    app: grafana
  portName: service

## This allows the prometheus-server to be run with an arbitrary user
##
initChownData:
  enabled: true
  ## initChownData container image
  ##
  image:
    repository: busybox
    tag: "1.31.1"
    sha: ""
    pullPolicy: IfNotPresent

## Grafana's primary configuration
## NOTE: values in map will be converted to ini format
## ref: http://docs.grafana.org/installation/configuration/
##
grafana.ini:
  paths:
    data: /var/lib/grafana/data
    logs: /var/log/grafana
    plugins: /var/lib/grafana/plugins
    provisioning: /etc/grafana/provisioning
  analytics:
    check_for_updates: true
  log:
    mode: console
  grafana_net:
    url:
      https://grafana.net

## Grafana container limits resources
resources:
  limits:
    cpu: 200m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

## Configure grafana datasources
## ref: http://docs.grafana.org/administration/provisioning/#datasources
##
datasources:
  datasources.yaml:
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        url: http://${PROMETHEUS_SVC}.${NAMESPACE}.svc.cluster.local
        access: proxy
        isDefault: true
      - name: CloudWatch
        type: cloudwatch
        jsonData:
          authType: keys
          defaultRegion: eu-west-1
        secureJsonData:
          accessKey: 'AKIA4LDLNFTPUXJRM2XN'
          secretKey: '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'

dashboardProviders:
  dashboardproviders.yaml:
    apiVersion: 1
    providers:
      - name: default
        orgId: 1
        folder: 
        type: file
        disableDeletion: true
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default

dashboards:
  default:
    prometheus-stats:
      gnetId: 10000
      revision: 1
      datasource: Prometheus
    cluster-metrics:
      gnetId: 6417
      revision: 1
      datasource: Prometheus
    persistent-volumes:
      gnetId: 6739
      revision: 1
      datasource: Prometheus
    traefik:
      gnetId: 4475
      revision: 5
      datasource: Prometheus
    aws-billing:
      gnetId: 139
      revision: 16
      datasource: Prometheus

## Plugins to install
plugins:
  - digrich-bubblechart-panel
  - grafana-clock-panel
  #- redis-datasource
  - grafana-piechart-panel

persistence:
  type: pvc
  enabled: true
  accessModes:
    - ReadWriteOnce
  size: 10Gi
  finalizers:
    - kubernetes.io/pvc-protection

